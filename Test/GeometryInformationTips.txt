// extended/parallel/MPI/examples/exMPI02/src/RunAction.cc ....creating file by user
// comparison between AIDA and ROOT

$Id: README,v 1.10 2014-01-21  $

    =========================================================
    Geant4 - an Object-Oriented Toolkit for Simulation in HEP
    =========================================================

                       Project Test
                       --------------------

  Project Test implements a double-arm spectrometer with wire chambers,
  hodoscopes and calorimeters. Event simulation and collection are
  enabled, as well as event display and analysis.


  1. GEOMETRY

     The spectrometer consists of two detector arms. One arm provides
     position and timing information of the incident particle while the
     other collects position, timing and energy information of the particle
     after it has been deflected by a magnetic field centered at the
     spectrometer pivot point.

       - First arm: box filled with air, also containing:

           1 hodoscope (15 vertical strips of plastic scintillator)
           1 drift chamber (5 horizontal argon gas layers with a
                            "virtual wire" at the center of each layer)

       - Target region: Tungsten-filled cylinder which contains
                                the field

       - Second arm: box filled with air, also containing:

           1 hodoscope (25 vertical strips of plastic scintillator)
           1 drift chamber (5 horizontal argon gas layers with a
                            "virtual wire" at the center of each layer)
           1 electromagnetic calorimeter:
                 a box sub-divided along x,y and z
                 axes into cells of CsI
           1 hadronic calorimeter:
                 a box sub-divided along x,y, and z axes
                 into cells of lead, with a layer of
                 plastic scintillator placed at the center
                 of each cell


  2. PHYSICS

     This example uses the following physics processes:

       - electromagnetic:
           photo-electric effect
           Compton scattering
           pair production
           bremsstrahlung
           ionization
           multiple scattering
           annihilation

       - decay

       - transportation in a field

     and defines the following particles:
        geantino, charged geantino, gamma, all leptons,
        pions, charged kaons

     Note that even though hadrons are defined, no hadronic processes
     are invoked in this example.


  3. EVENT:

     An event consists of the generation of a single particle which is
     transported through the first spectrometer arm. Here, a scintillator
     hodoscope records the reference time of the particle before it passes
     through a drift chamber where the particle position is measured.
     Momentum analysis is performed as the particle passes through a magnetic
     field at the spectrometer pivot and then into the second spectrometer
     arm. In the second arm, the particle passes through another hodoscope
     and drift chamber before interacting in the electromagnetic calorimeter.
     Here it is likely that particles will induce electromagnetic showers.
     The shower energy is recorded in a three-dimensional array of CsI
     crystals. Secondary particles from the shower, as well as primary
     particles which do not interact in the CsI crystals, pass into the
     hadronic calorimeter. Here, the remaining energy is collected in a
     three-dimensional array of scintillator-lead sandwiches.

     Several aspects of the event may be changed interactively by the user:

       - initial particle type
       - initial momentum and angle
       - momentum and angle spreads
       - type of initial particle may be randomized
       - strength of magnetic field
       - angle of the second spectrometer arm


  4. DETECTOR RESPONSE:

     All the information required to simulate and analyze an event is
     recorded in HITS. This information is recorded in the following
     sensitive detectors:

       - hodoscope:
           particle time
           particle position
           strip ID

       - drift chamber:
           particle time
           particle position
           layer ID

       - electromagnetic calorimeter:
           particle position
           energy deposited in cell
           cell ID

       - hadronic calorimeter:
           particle position
           energy deposited in cell
           cell ID


  5. VISUALIZATION:



  6. ANALYSIS:

 All analysis manipulations (histo booking, filling, saving
 histos in a file, etc...) are located in one class : HistoManager.
 Please install ROOT before building this example:
 http://root.cern.ch

/// ********************************************************************
/// ********************************************************************


// G4double NeuPos = 0.;
// G4double GamPos = 0.;
// G4Box* miniSDsol = new G4Box("NeutronSD_solid", //Name
// collimatorW/2, //half length
// collimatorH/2,
// Detthick/2);
// neutronSDLog = new G4LogicalVolume(miniSDsol, //its solid
// DefaultMat, //its material
// "NeutronSD"); //its name
// gammaSDLog = new G4LogicalVolume(miniSDsol, //its solid
// DefaultMat, //its material
// "GammaSD"); //its name

// for(G4int i=0;i<NbOfDetector;i++)
// {
// if(i<2)
// {
// NeuPos = Distance - 1.5*Detthick + (collimatorL + 2*Detthick)*i;
// GamPos = Distance - 0.5*Detthick + (collimatorL + 2*Detthick)*i;
// }
// else
// {
// NeuPos = 2500*mm - 1.5*Detthick;
// GamPos = 2500*mm - 0.5*Detthick;
// }


// new G4PVPlacement(0,
// G4ThreeVector(0,CollimatorYMov,NeuPos),
// neutronSDLog,
// "NeutronSD",
// WorldLog,
// false,
// i,
// fCheckOverlap);
// new G4PVPlacement(0,
// G4ThreeVector(0,-CollimatorYMov,GamPos),
// gammaSDLog,
// "GammaSD",
// WorldLog,
// false,
// i,
// fCheckOverlap);
// }


      // Create sensitive detectors: 1mm hemispherical shells at 2.5m.
      //--Neutron Detector
// G4double innerRadius = 2.499*m;
// G4double outerRadius = 2.500*m;
// G4double azStart = 0.;
// G4double azDelta = 360.*deg;
// G4double elStart = 0.;
// G4double elDelta = 90.*deg;
// /// @todo Check - should this be a G4VSolid* or a G4Sphere* ?
// G4VSolid*        nSphereSolid= new G4Sphere("NeutronSphere",
// innerRadius,outerRadius,
// azStart,azDelta,
// elStart,elDelta);
// neutronSDLog        =        new        G4LogicalVolume(nSphereSolid,DefaultMat,"NeutronSphere");
// /// @todo Check: is this bare new correct?
// new G4PVPlacement(0,G4ThreeVector(0,0,0),neutronSDLog,"NeutronSphere",
// WorldLog,false,0,fCheckOverlap);
// //--Gamma Detector
// innerRadius = 2.500*m;
// outerRadius = 2.501*m;
// /// @todo Check - should this be a G4VSolid* or a G4Sphere* ?
// G4VSolid* gSphereSolid = new G4Sphere("GammaSphere",
// innerRadius,outerRadius,
// azStart,azDelta,
// elStart,elDelta);
// gammaSDLog = new G4LogicalVolume(gSphereSolid,DefaultMat,"GammaSphere");
// /// @todo Check: is this bare new correct?
// new G4PVPlacement(0,G4ThreeVector(0,0,0),gammaSDLog,"GammaSphere",
// WorldLog,false,0,fCheckOverlap);

//**************************************** ANITA End ********************************************//

//**************************************** LANSCE Model *****************************************//
// //---------Geometry being used in this project ----------//
// // World, box,full length=41.1 meter
// G4double fWorldLength=41*m;
// //------------------------------world volume (shape: box)
// G4Box* WorldSolid = new G4Box("World_solid", //Name
// fWorldLength/2, //half length
// fWorldLength/2,
// fWorldLength/2);

// WorldLog = new G4LogicalVolume(WorldSolid, // Solid
// Air, // filled material
// "World_log");

// WorldPhy = new G4PVPlacement (0, // Rotation matrix
// G4ThreeVector(), // Position (0,0,0)
// WorldLog, // Logical volume
// "World_phys", // Name
// 0, // Mother volume
// false, // unused boolean
// 0, // copy number
// fCheckOverlap); // checking overlaps


////-------------Target cylindar--------------------------------------//
// // target tube, diameter 3*cm,height 7cm
// G4double TargetInR=0.*cm;
// G4double TargetOutR=1.5*cm;
// G4double TargetHeight=7*cm;

// G4Tubs* Target_tubs = new G4Tubs ("TargetSolid", //Name
// TargetInR, //Inner radius
// TargetOutR, //Outer radius
// TargetHeight/2, // Half length in z
// 0.*deg, // Starting phi angle
// 360.*deg); // Segment angle

// TargetLog = new G4LogicalVolume (Target_tubs,
// TargetMat,
// "TargetLog");
// new G4PVPlacement (0,
// G4ThreeVector(0.,0.,0.),
// TargetLog,
// "TargetPhy",
// WorldLog,
// false,
// 0,
// fCheckOverlap);
//// print parameters
////
// //        print        parameters
// G4cout        <<        "\n------------------------------------------------------------"
// <<        "\n--->        The        Target        is        consist        of        "        <<        TargetMat->GetName()        <<        '\n'
// <<        "        The        World        space        is        filled        with        "<<        Air->GetName()        <<        G4endl;

////--------------------------------------------------------------------------------------

// // Create sensitive detectors: 1mm hemispherical shells at 20m.
// //--Neutron Detector
// G4double innerRadius = 19.999*m;
// G4double outerRadius = 20.0*m;
// G4double azStart = 0.;
// G4double azDelta = 360.*deg;
// G4double elStart = 0.;
// G4double elDelta = 90.*deg;
// /// @todo Check - should this be a G4VSolid* or a G4Sphere* ?
// G4VSolid*        nSphereSolid= new G4Sphere("NeutronSphere",
// innerRadius,outerRadius,
// azStart,azDelta,
// elStart,elDelta);
// neutronSDLog        =        new        G4LogicalVolume(nSphereSolid,DefaultMat,"NeutronSphere");
// /// @todo Check: is this bare new correct?
// new G4PVPlacement(0,G4ThreeVector(0,0,0),neutronSDLog,"NeutronSphere",
// WorldLog,false,0,fCheckOverlap);
// //--Gamma Detector
// innerRadius = 20.0*m;
// outerRadius = 20.001*m;
// /// @todo Check - should this be a G4VSolid* or a G4Sphere* ?
// G4VSolid* gSphereSolid = new G4Sphere("GammaSphere",
// innerRadius,outerRadius,
// azStart,azDelta,
// elStart,elDelta);
// gammaSDLog = new G4LogicalVolume(gSphereSolid,DefaultMat,"GammaSphere");
// /// @todo Check: is this bare new correct?
// new G4PVPlacement(0,G4ThreeVector(0,0,0),gammaSDLog,"GammaSphere",
// WorldLog,false,0,fCheckOverlap);
//********************************************* LANSCE end *******************************************//





void HistoManager::book()
{
    // Create or get analysis manager
    // The choice of analysis technology is done via selection of a namespace
    // in HistoManager.hh

    // Creating a tree container to handle histograms and ntuples.
    // This tree is associated to an output file "rootFile"
    //

    G4String fileName = "Test.root";

    //  To create a TFile object corresponding to a new file called
    //  "Test.root" (.root is preferred extension)

    rootFile = new TFile(fileName,"RECREATE");

    //  Other options are CREATE(same as NEW),RECREATE(i.e. replace)
    //  UPDATE and READ.

    //  To check that file was successfully opened.

    if(!rootFile) {
      G4cout << " HistoManager::book :"
             << " problem creating the ROOT TFile "
             << G4endl;
      return;
    }

    if(rootFile->IsOpen())
        G4cout << " File opened successfully \n";

    //  An histogram is created by invoking one of the class constructors. For example,
    //  TH1D(const char *name,const char *title,Int_t nbinsx,Double_t xlow,Double_t xup);

//    histo[1] = new TH1D("1", "Edep in absorber", 100, 0., 800*CLHEP::MeV);
//    if (!histo[1]) G4cout << "\n can't create histo 1" << G4endl;
//    histo[2] = new TH1D("2", "Edep in gap", 100, 0., 100*CLHEP::MeV);
//    if (!histo[2]) G4cout << "\n can't create histo 2" << G4endl;
//    histo[3] = new TH1D("3", "trackL in absorber", 100, 0., 1*CLHEP::m);
//    if (!histo[3]) G4cout << "\n can't create histo 3" << G4endl;
//    histo[4] = new TH1D("4", "trackL in gap", 100, 0., 50*CLHEP::cm);
//    if (!histo[4]) G4cout << "\n can't create histo 4" << G4endl;

    // create 1 ntuple in subdirectory "tuples"
    // Create a TTree (name,title)

    ntupl = new TTree("Test_Tree", "An example of a tree");
    ntupl->Branch("n",              &fn,     "n/I");
    ntupl->Branch("Code",           &fCode,  "Code[n]/I");
    ntupl->Branch("Charge",         &fCharge,"Charge[n]/F");
    ntupl->Branch("KineticEnergy",  &fKinE,  "KinE[n]/D");
    ntupl->Branch("X",              &fPosX,  "hitX[n]/F");
    ntupl->Branch("Y",              &fPosY,  "hitY[n]/F");
    ntupl->Branch("Z",              &fPosZ,  "hitZ[n]/F");


    //  create branch with all information from the structure
    //  tree->Branch(branchname, &value,leaflist,bufsize);
    /*
       * address is the address of the first item of a structure
       * leaflist is the concatenation of all the variable names and types
         separated by a colon character :
         The variable name and the variable type are separated by a
         slash (/). The variable type must be 1 character. (Characters
         after the first are legal and will be appended to the visible
         name of the leaf, but have no effect.) If no type is given, the
         type of the variable is assumed to be the same as the previous
         variable. If the first variable does not have a type, it is
         assumed of type F by default. The list of currently supported
         types is given below:
            - C : a character string terminated by the 0 character
            - B : an 8 bit signed integer (Char_t)
            - b : an 8 bit unsigned integer (UChar_t)
            - S : a 16 bit signed integer (Short_t)
            - s : a 16 bit unsigned integer (UShort_t)
            - I : a 32 bit signed integer (Int_t)
            - i : a 32 bit unsigned integer (UInt_t)
            - F : a 32 bit floating point (Float_t)
            - D : a 64 bit floating point (Double_t)
            - L : a 64 bit signed integer (Long64_t)
            - l : a 64 bit unsigned integer (ULong64_t)
            - O : [the letter 'o', not a zero] a boolean (Bool_t)
     */

    G4cout << "\n----> Histogram file is opened in " << fileName << G4endl;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::save()
{
  if (rootFile) {
    rootFile->Write(); // Writing the histograms to the file
    rootFile->Close(); // and closing the tree (and the file)
    G4cout << "\n----> Histogram Tree is saved \n" << G4endl;
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

//void HistoManager::FillHisto(G4int ih, G4double xbin, G4double weight)
//{
//  if (ih >= MaxHisto) {
//    G4cout << "---> warning from HistoManager::FillHisto() : histo " << ih
//           << " does not exist. (xbin=" << xbin << " weight=" << weight << ")"
//           << G4endl;
//    return;
//    }

//  //    Filling histograms
//  //    Histogram of all types are filled via the hist->Fill(..) function
//  //    h1->Fill(x, w); //fill with weight

//  if (histo[ih]) { histo[ih]->Fill(xbin, weight); }

////  Int_t Fill(Double_t x, Double_t w)
////  -*-*-*-*-*-*Increment bin with abscissa X with a weight w*-*-*-*-*-*-*-*


////   if x is less than the low-edge of the first bin, the Underflow bin is incremented
////   if x is greater than the upper edge of last bin, the Overflow bin is incremented

////   If the storage of the sum of squares of weights has been triggered,
////   via the function Sumw2, then the sum of the squares of weights is incremented
////   by w^2 in the bin corresponding to x.

////  -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


//}

////....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

//void HistoManager::Normalize(G4int ih, G4double fac)
//{
//  if (ih >= MaxHisto) {
//    G4cout << "---> warning from HistoManager::Normalize() : histo " << ih
//           << " does not exist. (fac=" << fac << ")" << G4endl;
//    return;
//  }

//  if (histo[ih]) histo[ih]->Scale(fac);

////  void Scale(Double_t c1 = 1, Option_t* option = "")

////     -*-*-*Multiply this histogram by a constant c1*-*-*-*-*-*-*-*-*


////     this = c1*this

////   Note that both contents and errors(if any) are scaled.
////   This function uses the services of TH1::Add

////   IMPORTANT NOTE: If you intend to use the errors of this histogram later
////   you should call Sumw2 before making this operation.
////   This is particularly important if you fit the histogram after TH1::Scale

////   One can scale an histogram such that the bins integral is equal to
////   the normalization parameter via TH1::Scale(Double_t norm), where norm
////   is the desired normalization divided by the integral of the histogram.

////   If option contains "width" the bin contents and errors are divided
////   by the bin width.


//}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void HistoManager::FillNtuple(G4int n, G4int code, G4float charge,
                              G4double E, G4float Px, G4float Py, G4float Pz)
{

    for(G4int k=0;k<n;k++)
    {
        fn = 0;
        fCode[k] =0;
        fCharge[k] = 0;
        fKinE[k] = 0;
        fPosX[k] = 0;
        fPosY[k] = 0;
        fPosZ[k] = 0;
    }


  if (ntupl) ntupl->Fill();
}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

